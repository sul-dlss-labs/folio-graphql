# These are non-core graphql types; resolvers are provided by graphql-scalars
scalar Date
scalar UUID
scalar EmailAddress

enum PatronStatus {
  OK
  BLOCKED
}

enum PatronStanding {
  OK
  BARRED
  COLLECTION
  BLOCKED
  DELINQUENT
}

# We only need one query; all the magic happens in the resolvers
type Query {
  patron(id: UUID!): Patron
}

type Patron {
  id: UUID
  user: User
  totalCharges: ChargeAmount!
  totalChargesCount: Int!,
  totalLoans: Int!,
  totalHolds: Int!,
  charges: [Charge]!,
  holds: [Hold]!,
  loans: [Loan]!,
}

type User {
  id: UUID
  username: String
  externalSystemId: String
  barcode: String
  active: Boolean
  type: String
  patronGroup: UUID
  department: [UUID]
  personal: Personal
  enrollmentDate: Date
  expirationDate: Date
  metadata: Metadata
  tags: Tags
}

type Personal {
  lastName: String!
  firstName: String
  middleName: String
  preferredFirstName: String
  email: EmailAddress
  phone: String
  mobilePhone: String
  dateOfBirth: Date
  preferredContactTypeId: String
}

type Address {
  id: String
  countryId: String
  addressLine1: String
  addressLine2: String
  city: String
  region: String
  postalCode: String
  addressTypeId: UUID!
  primaryAddress: Boolean
}

type Metadata {
  createdDate: Date!
  createdByUserId: UUID
  createdByUsername: String
  updatedDate: Date
  updatedByUserId: UUID
  updatedByUsername: String
}

type Tags {
  tagList: [String]
}

type Item {
  instanceId: UUID!
  itemId: UUID
  title: String
  author: String
  isbn: String
}

type Charge {
  item: Item
  chargeAmount: ChargeAmount
  accrualDate: Date
  description: String
  state: String
  reason: String
  feeFineId: UUID
}

type ChargeAmount {
  amount: Float!
  isoCurrencyCode: String!
}

type Hold {
  item: Item
  requestDate: Date!
  expirationDate: Date
  status: String
  pickupLocationId: UUID!
  queuePosition: Int
  cancellationReasonId: UUID
  canceledByUserId: UUID
  cancellationAdditionalInformation: String
  canceledDate: String
  patronComments: String
}

type Loan {
  item: Item!
  loanDate: Date!
  dueDate: Date!
  overdue: Boolean!
}
